name: Gawg Deploy workflow

on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        description: 'The name of the artifact to deploy'
        type: string
      docker:
        required: true
        description: 'Whether to deploy the artifact as a Docker container'
        type: boolean
      self-hosted-runner:
        required: true
        description: 'Whether to deploy the artifact using a self-hosted runner'
        type: boolean
      deployment:
        required: true
        description: 'The deployment environment'
        type: string
      config-json:
        required: true
        description: 'The JSON configuration for the deployment'
        type: string

jobs:
  none-deployment:
    if: ${{ inputs.deployment == 'none' }}
    runs-on: ubuntu-latest
    steps:
      - name: Skipping deployment
        shell: bash
        run: |
          echo "Skipping deployment. To deploy, set the deployment environment to a valid value."
          exit 0
  
  docker-hub:
    if: ${{ inputs.deployment == 'dockerhub' }}
    runs-on: ubuntu-latest
    steps:

      - name: Deploy to Docker Hub
        shell: bash
        run: |
          echo "Deploying to Docker Hub"
          echo "The selected deployment is DOCKER-HUB."
          echo "To deploy to Docker Hub, make sure you have a Dockerfile in the root of your repository."

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            Dockerfile
          sparse-checkout-cone-mode: false

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}

      - name: Show artifact files
        shell: bash
        run: |
          echo "⚠️ Make sure the artifact files are correct and there is a Dockerfile inside it."
          echo "Files in artifact:"
          ls -lah
      
      - name: Check Docker Username Credentials
        shell: bash
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "❌ DOCKER_USERNAME is not set. To set it, go to your repository settings > Secrets > New repository secret"
            echo "❌ DOCKER_USERNAME is not set. To set it, go to your repository settings > Secrets > New repository secret" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Check Docker Password Credentials
        shell: bash
        run: |
          if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "❌ DOCKER_PASSWORD is not set. To set it, go to your repository settings > Secrets > New repository secret"
            echo "❌ DOCKER_PASSWORD is not set. To set it, go to your repository settings > Secrets > New repository secret" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Check Docker TAG
        shell: bash
        run: |
          if [ -z "${{ fromJson(inputs.config-json).DOCKER_TAG }}" ]; then
            echo "❌ DOCKER_TAG is not set. To set it, go to your  workflow_config.yml file and set the DOCKER_TAG variable."
            echo "❌ DOCKER_TAG is not set. To set it, go to your  workflow_config.yml file and set the DOCKER_TAG variable" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Check Docker Repository
        shell: bash
        run: |
          if [ -z "${{ fromJson(inputs.config-json).DOCKER_REPOSITORY }}" ]; then
            echo "❌ DOCKER_REPOSITORY is not set. To set it, go to your  workflow_config.yml file and set the DOCKER_REPOSITORY variable."
            echo "❌ DOCKER_REPOSITORY is not set. To set it, go to your  workflow_config.yml file and set the DOCKER_REPOSITORY variable" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        shell: bash
        run: |
          docker build -t ${{ fromJson(inputs.config-json).DOCKER_REPOSITORY }}/${{ inputs.artifact-name }}:${{ fromJson(inputs.config-json).DOCKER_TAG }} .

      - name: Show Docker images
        shell: bash
        run: |
          echo "Docker image built:"
          docker images

      - name: Push Docker image
        shell: bash
        run: docker push ${{ fromJson(inputs.config-json).DOCKER_REPOSITORY }}/${{ inputs.artifact-name }}:${{ fromJson(inputs.config-json).DOCKER_TAG }}

      - name: Summary
        shell: bash
        run: |
          echo "## Deployment summary"
          echo "## Deployment summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker image pushed to Docker Hub."
          echo "✅ Docker image pushed to Docker Hub." >> $GITHUB_STEP_SUMMARY
          echo "The image ${{ inputs.artifact-name }}:latest is now available in Docker Hub."
          echo "The image ${{ inputs.artifact-name }}:latest is now available in Docker Hub." >> $GITHUB_STEP_SUMMARY


  aws-s3:
    if: ${{ inputs.deployment == 'aws-s3' }}
    runs-on: ubuntu-latest
    steps:

      - name: Deploy to AWS S3 Bucket
        shell: bash
        run: |
          echo "Deploying to AWS S3 Bucket"
          echo "The selected deployment is AWS-S3."
          echo "To deploy to AWS S3 Bucket, make sure you have an AWS S3 Bucket configured."

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}

      - name: Show artifact files
        shell: bash
        run: |
          echo "⚠️ Make sure the artifact files are correct and there is a Dockerfile inside it."
          echo "Files in artifact:"
          ls -lah

      - name: Generate zip file
        shell: bash
        run: |
          zip -r ${{ inputs.artifact-name }}.zip .
      
      - name: Check AWS Credentials
        shell: bash
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID is not set. To set it, go to your repository settings > Secrets > New repository secret"
            echo "❌ AWS_ACCESS_KEY_ID is not set. To set it, go to your repository settings > Secrets > New repository secret" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "AWS_ACCESS_KEY_ID is set."
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY is not set. To set it, go to your repository settings > Secrets > New repository secret"
            echo "❌ AWS_SECRET_ACCESS_KEY is not set. To set it, go to your repository settings > Secrets > New repository secret" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "AWS_SECRET_ACCESS_KEY is set."
          fi
          if [ -z "${{ fromJson(inputs.config-json).AWS_S3_BUCKET_NAME }}" ]; then
            echo "❌ AWS_S3_BUCKET_NAME is not set. To set it, go to your repository settings > Secrets > New repository secret"
            echo "❌ AWS_S3_BUCKET_NAME is not set. To set it, go to your repository settings > Secrets > New repository secret" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "AWS_S3_BUCKET_NAME is set."
          fi

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@main
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to s3 bucket
        shell: bash
        run: |
          aws s3 cp ${{ inputs.artifact-name }}.zip s3://${{ fromJson(inputs.config-json).AWS_S3_BUCKET_NAME }}/ --region us-east-1

      - name: Summary
        shell: bash
        run: |
          echo "## Deployment summary"
          echo "## Deployment summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Artifact deployed to AWS S3 Bucket."
          echo "✅ Artifact deployed to AWS S3 Bucket." >> $GITHUB_STEP_SUMMARY
          echo "The artifact ${{ inputs.artifact-name }} is now available in AWS S3 Bucket."
          echo "The artifact ${{ inputs.artifact-name }} is now available in AWS S3 Bucket." >> $GITHUB_STEP_SUMMARY
          echo "URL: https://s3.amazonaws.com/${{ fromJson(inputs.config-json).AWS_S3_BUCKET_NAME }}/${{ inputs.artifact-name }}"
          echo "URL: https://s3.amazonaws.com/${{ fromJson(inputs.config-json).AWS_S3_BUCKET_NAME }}/${{ inputs.artifact-name }}" >> $GITHUB_STEP_SUMMARY